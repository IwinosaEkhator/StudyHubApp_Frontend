import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  TouchableOpacity,
  Alert,
  Image,
  TextInput,
} from "react-native";
import { createStackNavigator } from "@react-navigation/stack";
import { NavigationContainer } from "@react-navigation/native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { WebView } from "react-native-webview";

const Stack = createStackNavigator();

const LibraryScreen = ({ navigation }) => {
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("harry potter");
  const [bookmarks, setBookmarks] = useState([]);

  useEffect(() => {
    fetchBooks(searchQuery);
    loadBookmarks();
  }, []);

  const fetchBooks = async (query) => {
    setLoading(true);
    try {
      const response = await fetch(
        `https://www.googleapis.com/books/v1/volumes?q=${query}`
      );
      const data = await response.json();
      setBooks(data.items || []);
    } catch (error) {
      console.error("Error fetching books:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleBookmark = async (book) => {
    let updatedBookmarks = [...bookmarks];
    if (bookmarks.some((b) => b.id === book.id)) {
      updatedBookmarks = bookmarks.filter((b) => b.id !== book.id);
    } else {
      updatedBookmarks.push(book);
    }
    setBookmarks(updatedBookmarks);
    await AsyncStorage.setItem("bookmarks", JSON.stringify(updatedBookmarks));
  };

  const loadBookmarks = async () => {
    const storedBookmarks = await AsyncStorage.getItem("bookmarks");
    if (storedBookmarks) {
      setBookmarks(JSON.parse(storedBookmarks));
    }
  };

  const handleReadBook = (book) => {
    if (book.volumeInfo.previewLink) {
      navigation.navigate("ReadBook", { url: book.volumeInfo.previewLink });
    } else {
      Alert.alert("No Preview Available", "This book doesn't have a preview.");
    }
  };

  const handleSearch = () => {
    fetchBooks(searchQuery);
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <Text style={styles.loadingText}>Loading books...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.header}>ðŸ“š Library App</Text>

      <View style={styles.searchContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder="Search for books..."
          value={searchQuery}
          onChangeText={(text) => setSearchQuery(text)}
        />
        <TouchableOpacity style={styles.searchButton} onPress={handleSearch}>
          <Text style={styles.buttonText}>Search</Text>
        </TouchableOpacity>
      </View>

      <FlatList
        data={books}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.bookItem}>
            {item.volumeInfo.imageLinks?.thumbnail && (
              <Image
                source={{ uri: item.volumeInfo.imageLinks.thumbnail }}
                style={styles.bookImage}
              />
            )}
            <View style={styles.bookInfo}>
              <Text style={styles.title}>{item.volumeInfo.title}</Text>
              <Text style={styles.author}>
                {item.volumeInfo.authors?.join(", ") || "Unknown Author"}
              </Text>

              <View style={styles.buttonContainer}>
                <TouchableOpacity
                  style={styles.readButton}
                  onPress={() => handleReadBook(item)}
                >
                  <Text style={styles.buttonText}>Read</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={[
                    styles.bookmarkButton,
                    bookmarks.some((b) => b.id === item.id) && {
                      backgroundColor: "gold",
                    },
                  ]}
                  onPress={() => handleBookmark(item)}
                >
                  <Text style={styles.buttonText}>
                    {bookmarks.some((b) => b.id === item.id)
                      ? "Bookmarked"
                      : "Bookmark"}
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        )}
      />

      <TouchableOpacity
        style={styles.viewBookmarksButton}
        onPress={() => navigation.navigate("Bookmarks")}
      >
        <Text style={styles.buttonText}>View Bookmarks</Text>
      </TouchableOpacity>
    </View>
  );
};

const BookmarksScreen = ({ navigation }) => {
  const [bookmarks, setBookmarks] = useState([]);

  useEffect(() => {
    loadBookmarks();
  }, []);

  const loadBookmarks = async () => {
    const storedBookmarks = await AsyncStorage.getItem("bookmarks");
    if (storedBookmarks) {
      setBookmarks(JSON.parse(storedBookmarks));
    }
  };

  const removeBookmark = async (bookId) => {
    const updatedBookmarks = bookmarks.filter((book) => book.id !== bookId);
    setBookmarks(updatedBookmarks);
    await AsyncStorage.setItem("bookmarks", JSON.stringify(updatedBookmarks));
  };

  return (
    <View style={styles.container}>
      <Text style={styles.header}>ðŸ“Œ Bookmarks</Text>

      <FlatList
        data={bookmarks}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.bookItem}>
            <Text style={styles.title}>{item.volumeInfo.title}</Text>
            <Text style={styles.author}>
              {item.volumeInfo.authors?.join(", ") || "Unknown Author"}
            </Text>

            <View style={styles.buttonContainer}>
              <TouchableOpacity
                style={styles.readButton}
                onPress={() =>
                  navigation.navigate("ReadBook", {
                    url: item.volumeInfo.previewLink,
                  })
                }
              >
                <Text style={styles.buttonText}>Read</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.removeBookmarkButton}
                onPress={() => removeBookmark(item.id)}
              >
                <Text style={styles.buttonText}>Remove</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}
      />
    </View>
  );
};

const ReadBookScreen = ({ route }) => {
  return <WebView source={{ uri: route.params.url }} style={{ flex: 1 }} />;
};

export default function LibraryApp() {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen name="Library" component={LibraryScreen} />
        <Stack.Screen name="Bookmarks" component={BookmarksScreen} />
        <Stack.Screen name="ReadBook" component={ReadBookScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: "#f9f9f9" },
  header: {
    fontSize: 22,
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 20,
  },
  searchContainer: { flexDirection: "row", marginBottom: 15 },
  searchInput: {
    flex: 1,
    height: 40,
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 5,
    paddingHorizontal: 10,
    backgroundColor: "#fff",
  },
  searchButton: {
    backgroundColor: "#007bff",
    paddingHorizontal: 15,
    paddingVertical: 10,
    marginLeft: 10,
    borderRadius: 5,
    alignItems: "center",
  },
  bookItem: {
    padding: 10,
    borderRadius: 10,
    backgroundColor: "#fff",
    marginBottom: 15,
  },
  title: { fontSize: 16, fontWeight: "bold", color: "#333" },
  author: { fontSize: 14, color: "#555" },
  buttonContainer: { flexDirection: "row", marginTop: 10 },
  readButton: {
    flex: 1,
    backgroundColor: "#28a745",
    paddingVertical: 8,
    borderRadius: 5,
    alignItems: "center",
    marginRight: 5,
  },
  bookmarkButton: {
    flex: 1,
    backgroundColor: "#007bff",
    paddingVertical: 8,
    borderRadius: 5,
    alignItems: "center",
  },
  removeBookmarkButton: {
    flex: 1,
    backgroundColor: "#dc3545",
    paddingVertical: 8,
    borderRadius: 5,
    alignItems: "center",
  },
  viewBookmarksButton: {
    marginTop: 20,
    backgroundColor: "#ffa500",
    paddingVertical: 10,
    borderRadius: 5,
    alignItems: "center",
  },
  buttonText: { color: "#fff", fontSize: 14, fontWeight: "bold" },
});
